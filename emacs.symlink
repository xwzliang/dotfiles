;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(package-initialize)

;; Enable debugging on error
(toggle-debug-on-error)

;; Back up settings
;; (setq backup-directory-alist `(("." . "~/.emacs.d/my_backups")))
(defvar backup-directory "~/.emacs.d/my_backups")
(if (not (file-exists-p backup-directory))
    (make-directory backup-directory t))
(setq
	make-backup-files t        ; backup a file the first time it is saved
	backup-directory-alist `((".*" . ,backup-directory)) ; save backup files in backup-directory
	backup-by-copying t     ; copy the current file into backup directory
	version-control t   ; version numbers for backup files
	delete-old-versions t   ; delete unnecessary versions
	kept-old-versions 6     ; oldest versions to keep when a new numbered backup is made (default: 2)
	kept-new-versions 9 ; newest versions to keep when a new numbered backup is made (default: 2)
	auto-save-default t ; auto-save every buffer that visits a file
	auto-save-timeout 20 ; number of seconds idle time before auto-save (default: 30)
	auto-save-interval 200 ; number of keystrokes between auto-saves (default: 300)
 )

;; Load macros
(load-file "~/.emacs.d/macros")

(load-theme 'clues t)

;; Disable bars
(menu-bar-mode -1)
(tool-bar-mode -1)
(if (display-graphic-p)
	; GUI
	(toggle-scroll-bar -1))

;; Disable the startup splash screen
(setq inhibit-splash-screen t)

;; Change background color for modeline to dark orange
(set-face-background 'mode-line "#af5f00")
(set-face-background 'mode-line-inactive "#af5f00")

;; Change foreground color for active modeline to black
(set-face-foreground 'mode-line "black")

;; Change color for prompt in mini-buffer
(set-face-foreground 'minibuffer-prompt "white")


;; basic settings
(setq
      global-mark-ring-max 5000         ; increase mark ring to contains 5000 entries
      mark-ring-max 5000                ; increase mark ring to contains 5000 entries
	  kill-ring-max 5000				; increase kill-ring capacity
      mode-require-final-newline t      ; add a newline to end of file
)

;; Changing tab width
(setq-default tab-width 4)

;; ibuffer settings
(setq ibuffer-use-other-window t) ;; always display ibuffer in another window

;; For all major mode, treat underscore as part of the whole word
(add-hook 'after-change-major-mode-hook
                       (lambda ()
                         (modify-syntax-entry ?_ "w")))

;; dired
(setq
	dired-dwim-target t            ; if another Dired buffer is visible in another window, use that directory as target for Rename/Copy
	dired-recursive-copies 'always         ; "always" means no asking
	dired-recursive-deletes 'top           ; "top" means ask once for top level directory
	dired-listing-switches "-lha"          ; human-readable listing
)
(require 'dired)
;; automatically refresh dired buffer on changes
(add-hook 'dired-mode-hook 'auto-revert-mode)
;; if it is not Windows, use the following listing switches to group directories first.
(when (not (eq system-type 'windows-nt))
  (setq dired-listing-switches "-lha --group-directories-first"))
(require 'wdired)
(setq
	wdired-allow-to-change-permissions t   ; allow to edit permission bits
	wdired-allow-to-redirect-links t       ; allow to edit symlinks
 )
; Use e to edit in dired mode.
(define-key dired-mode-map (kbd "e") 'wdired-change-to-wdired-mode)

;; saveplace: remembers your location in a file when saving files
(require 'saveplace)
(toggle-save-place-globally 1)

;; Enable electric-pair-mode for inserting new line and indent automatically after brace
(electric-pair-mode 1)

;; Automatically reload changed file in buffer
(global-auto-revert-mode t)

;; Key bindings for mini-buffer
(define-key minibuffer-local-map (kbd "C-u") 'backward-kill-sentence)
(define-key minibuffer-local-map (kbd "C-h") 'left-char)
(define-key minibuffer-local-map (kbd "C-l") 'right-char)
(define-key minibuffer-local-map (kbd "C-b") 'left-word)
(define-key minibuffer-local-map (kbd "C-w") 'right-word)
(define-key minibuffer-local-map "\M-p" 'evil-paste-after)

;; Key bindings for *backtrace* buffer
(add-hook 'debugger-mode-hook
  (lambda ()
    (define-key debugger-mode-map (kbd ":") 'evil-ex)
))

;; Change code indentation style for C
(add-hook 'c-mode-hook
	'(lambda()
		(c-set-style "cc-mode")))

;; Enable sh-mode for .bats file
(add-to-list 'auto-mode-alist '("\\.bats\\'" . sh-mode))

;; Automatically give executable permissions if file begins with shebang
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)


;; Package settings

;; use-package
(eval-when-compile
  (require 'use-package))
(require 'bind-key)

;; other packages with use-package

(use-package persp-mode
  :init (add-hook 'after-init-hook 'persp-mode)
  :config
	; Don't auto resume
	(setq persp-auto-resume-time 0)
    (persp-set-keymap-prefix (kbd "C-c r"))
  )

;; company-mode
(use-package company
  :init
		(add-hook 'after-init-hook 'global-company-mode)
  :bind
		("C-j" . company-select-next)
		("C-k" . company-select-previous)
  :config
		(setq company-idle-delay 0)
		(setq company-backends
		'((company-files
			company-keywords
			company-capf	; completion-at-point-functions backend
			company-yasnippet
			)
			(company-abbrev company-dabbrev)))
		; Solve the conflicts with yasnippet of tab key binding
		(advice-add 'company-complete-common :before (lambda ()
										(setq my-company-point (point))))
		(advice-add 'company-complete-common :after (lambda ()
										(when (equal my-company-point (point)) (yas-expand))))
  :custom-face
		(company-preview ((t (:background "black" :foreground "brightblack"))))
		(company-preview-common ((t (:inherit company-preview :foreground "brightblack"))))
		(company-scrollbar-bg ((t (:background "black"))))
		(company-scrollbar-fg ((t (:background "black"))))
		(company-tooltip ((t (:background "black" :foreground "white"))))
		(company-tooltip-annotation ((t (:foreground "yellow"))))
		(company-tooltip-common ((t (:foreground "gold3"))))
		(company-tooltip-selection ((t (:background "forestgreen"))))
  )

;; evil-collection
(setq evil-want-keybinding nil)
(require 'evil)
(evil-mode 1)
(require 'evil-collection)
(delete 'w3m evil-collection-mode-list)
;; (setq evil-collection-mode-list (remove 'w3m evil-collection-mode-list))
(evil-collection-init)

;; Config evil mode
; change granularity level of undo
(setq evil-want-fine-undo t)
; Use C-h,j,k,l,b,w in ex command lines
(define-key evil-ex-completion-map "\C-b" 'backward-word)
(define-key evil-ex-completion-map "\C-w" 'forward-word)
(define-key evil-ex-completion-map "\C-h" 'backward-char)
(define-key evil-ex-completion-map "\C-l" 'forward-char)
(define-key evil-ex-completion-map "\C-k" 'previous-complete-history-element)
(define-key evil-ex-completion-map "\C-j" 'next-complete-history-element)
; Use B,E to move to the beggining and end of line
(define-key evil-motion-state-map "B" 'evil-beginning-of-line)
(define-key evil-motion-state-map "E" 'evil-end-of-line)
; Use C-b to evil-scroll-up instead of evil-scroll-page-up
(define-key evil-motion-state-map "\C-b" 'evil-scroll-up)


;; settings for smartparens package
(require 'smartparens-config)
(smartparens-global-mode 1)

;; settings for evil-surround
(global-evil-surround-mode 1)

;; settings for evil-nerd-commenter
(evilnc-default-hotkeys)


;; settings for git-gutter
(require 'git-gutter)
(global-git-gutter-mode +1)
(add-to-list 'git-gutter:update-hooks 'focus-in-hook)


;; settings for neotree
(require 'neotree)
;; Use ctrl+n to toggle neotree in evil normal state
;; (define-key evil-normal-state-map (kbd "C-n") 'neotree-toggle)
(define-key evil-normal-state-map (kbd "C-n") 'neotree-refresh)
(add-hook 'neotree-mode-hook
	(lambda ()
		(define-key evil-normal-state-local-map (kbd "s") 'neotree-enter-vertical-split)
		(define-key evil-normal-state-local-map (kbd "S") 'neotree-enter-horizontal-split)
))


;; settings for helm
(require 'helm)
(require 'helm-config)
(helm-mode 1)
; Use C-h,j,k,l,b,w,n,p,z in helm mode
(define-key helm-map (kbd "C-j") 'helm-next-line)
(define-key helm-map (kbd "C-k") 'helm-previous-line)
(define-key helm-map (kbd "C-h") 'left-char)
(define-key helm-map (kbd "C-l") 'right-char)
(define-key helm-map (kbd "C-n") 'helm-next-page)
(define-key helm-map (kbd "C-p") 'helm-previous-page)
(define-key helm-map (kbd "C-w") 'right-word)
(define-key helm-map (kbd "C-b") 'left-word)
(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
(define-key helm-map (kbd "C-u") 'helm-find-files-up-one-level)
(define-key helm-map "\t" 'helm-execute-persistent-action)
(define-key helm-read-file-map (kbd "C-l") 'right-char)

(setq
      ;; helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-file-name-history-use-recentf t
      ;; helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      ;; helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      ;; helm-echo-input-in-header-line		t
)

; Don't show the first two lines (current dir and parent dir)
(advice-add 'helm-ff-filter-candidate-one-by-one
        :around (lambda (fcn file)
                  (unless (string-match "\\(?:/\\|\\`\\)\\.\\{1,2\\}\\'" file)
                    (funcall fcn file))))

;; helm-mini
(setq helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match    t)

;; helm-find-files
(define-key helm-find-files-map (kbd "C-l") 'right-char)

;; helm ack-grep (Ubuntu) or ack (MacOS)
(if (eq system-type 'darwin)
	(progn
	  (if (not (member "/usr/local/bin/" exec-path))
		(add-to-list 'exec-path "/usr/local/bin/"))
		(setq helm-grep-default-command
			"ack -Hn --color --smart-case --no-group %e %p %f"
			helm-grep-default-recurse-command
			"ack -H --color --smart-case --no-group %e %p %f")
	)
	(setq helm-grep-default-command
		"ack-grep -Hn --color --smart-case --no-group %e %p %f"
		helm-grep-default-recurse-command
		"ack-grep -H --color --smart-case --no-group %e %p %f"))

;; helm-semantic-or-imenu
(semantic-mode 1)
(setq helm-semantic-fuzzy-match	t
      helm-imenu-fuzzy-match	t)
; Show type in C/C++
(with-eval-after-load 'helm-semantic
      (push '(c-mode . semantic-format-tag-summarize) helm-semantic-display-style)
      (push '(c++-mode . semantic-format-tag-summarize) helm-semantic-display-style))

;; helm-occur
(setq helm-apropos-fuzzy-match t)

;; helm-eshell-history
(require 'helm-eshell)
(add-hook 'eshell-mode-hook
	#'(lambda ()
		(define-key eshell-mode-map (kbd "C-c C-l")  'helm-eshell-history)
))

;; helm-mini-buffer-history
(define-key minibuffer-local-map (kbd "C-c C-l") 'helm-minibuffer-history)

;; helm-descbinds
(require 'helm-descbinds)
(helm-descbinds-mode)

;; hydra for helm
(defhydra helm-like-unite (:hint nil
                           :color pink)
;;   "
;; Nav ^^^^^^^^^        Mark ^^          Other ^^       Quit
;; ^^^^^^^^^^------------^^----------------^^----------------------
;; _K_ ^ ^ _k_ ^ ^     _m_ark           _v_iew         _i_: cancel
;; ^↕^ _h_ ^✜^ _l_     _t_oggle mark    _H_elp         _q_: quit
;; _J_ ^ ^ _j_ ^ ^     _U_nmark all     _d_elete
;; ^^^^^^^^^^                           _f_ollow: %(helm-attr 'follow)
;; "
  ;; arrows
  ("h" helm-beginning-of-buffer)
  ("j" helm-next-line)
  ("k" helm-previous-line)
  ("l" helm-end-of-buffer)
  ("p" helm-previous-page)
  ("n" helm-next-page)
  ;; beginning/end
  ("g" helm-beginning-of-buffer)
  ("G" helm-end-of-buffer)
  ;; scroll
  ("K" helm-scroll-other-window-down)
  ("J" helm-scroll-other-window)
  ;; mark
  ("m" helm-toggle-visible-mark)
  ("t" helm-toggle-all-marks)
  ("U" helm-unmark-all)
  ;; exit
  ("<escape>" keyboard-escape-quit "" :exit t)
  ("q" keyboard-escape-quit :exit t)
  ("i" nil)
  ;; sources
  ("}" helm-next-source)
  ("{" helm-previous-source)
  ;; rest
  ("H" helm-help)
  ("v" helm-execute-persistent-action)
  ("d" helm-buffer-run-kill-persistent)
  ("f" helm-follow-mode))

(define-key helm-map (kbd "<escape>") 'helm-like-unite/body)

;; projectile and helm-projectile
(projectile-global-mode)
(setq projectile-completion-system 'helm)
(helm-projectile-on)
(setq projectile-switch-project-action 'helm-projectile)
;; keymap prefix for projectile (C-c p)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
(define-key projectile-mode-map (kbd "C-c p s a") 'helm-projectile-ack)


;; iedit
(require 'iedit)
;; evil-iedit-state
(require 'evil-iedit-state)
(define-key iedit-mode-keymap (kbd "M-e") 'evil-iedit-state)


;; ggtags and helm-gtags
(add-hook 'c-mode-common-hook
    (lambda ()
      (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
		(ggtags-mode 1)
		(helm-gtags-mode)
		)
      (define-key evil-normal-state-local-map (kbd "M-.") 'ggtags-find-tag-dwim)
	  ))
(setq
	helm-gtags-prefix-key "\C-c t"
	helm-gtags-suggested-key-mapping t
	helm-gtags-path-style 'relative
	helm-gtags-ignore-case t
	helm-gtags-auto-update t
)

(with-eval-after-load 'helm-gtags
	(define-key helm-gtags-mode-map (kbd "C-c t a") 'helm-gtags-tags-in-this-function)
	(define-key helm-gtags-mode-map (kbd "C-c t f") 'helm-gtags-find-files)
	(define-key helm-gtags-mode-map (kbd "C-c t p") 'helm-gtags-parse-file)
	(define-key helm-gtags-mode-map (kbd "C-c t S") 'helm-gtags-show-stack)
)

;; yasnippet and helm-c-yasnippet
; Don't make aliases for the old style yas/ prefixed symbols
(setq yas-alias-to-yas/prefix-p nil)
(require 'yasnippet)
(require 'helm-c-yasnippet)
; helm pattern space match anyword greedy, "if else" replace to "if.*else"
(setq helm-yas-space-match-any-greedy t)
(yas-global-mode 1)


;; bookmark+
(add-to-list 'load-path "~/.emacs.d/custom/bookmark-plus/")
(require 'bookmark+)
;; bm
(require 'bm)


;; expand-region
(require 'expand-region)
;; Unset M-_ in undo-tree-map (This line need to be placed after evil settings)
(define-key undo-tree-map (kbd "M-_") nil)


;; ibuffer-vc
(add-hook 'ibuffer-hook
          (lambda ()
            (ibuffer-vc-set-filter-groups-by-vc-root)
            (unless (eq ibuffer-sorting-mode 'alphabetic)
              (ibuffer-do-sort-by-alphabetic))))
(setq ibuffer-formats
      '((mark modified read-only vc-status-mini " "
              (name 18 18 :left :elide)
              " "
              (size 9 -1 :right)
              " "
              (mode 16 16 :left :elide)
              " "
              (vc-status 16 16 :left)
              " "
              filename-and-process)))


;; settings for magit
(require 'magit)
(add-hook 'magit-post-refresh-hook
          #'git-gutter:update-all-windows)

;; settings for evil-magit
(require 'evil-magit)

(evil-define-key evil-magit-state magit-mode-map "o" 'magit-file-checkout)


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(bmkp-last-as-first-bookmark-file "~/.emacs.d/bookmarks")
 '(git-gutter:modified-sign "~")
 '(insert-shebang-file-types
   (quote
	(("py" . "python3")
	 ("groovy" . "groovy")
	 ("fish" . "fish")
	 ("robot" . "robot")
	 ("rb" . "ruby")
	 ("lua" . "lua")
	 ("php" . "php")
	 ("sh" . "bash")
	 ("pl" . "perl")
	 ("bats" . "bats"))))
 '(linum-format " %3d ")
 '(mac-command-modifier (quote super))
 '(mac-option-modifier (quote meta))
 '(neo-confirm-create-directory (quote off-p))
 '(neo-confirm-create-file (quote off-p)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(git-gutter:added ((t (:foreground "white" :weight extra-light))))
 '(git-gutter:deleted ((t (:foreground "white" :weight extra-light))))
 '(git-gutter:modified ((t (:foreground "white" :weight extra-light))))
 '(linum ((t (:background "black" :foreground "#6a6a6a" :width condensed))))
 '(sh-heredoc ((t (:foreground "color-136" :weight normal)))))

;; For file extension in my_insert_file_type_list and file has not been created yet, insert shebang, two newline and enter evil-insert-state
(defun my_shebang_hook()
  (setq my_insert_file_type_list (list
    "sh"
    "py"
    "bats"
   ))
  (if (and (member (file-name-extension (buffer-name)) my_insert_file_type_list) (not (file-exists-p (buffer-name))))
    (progn
      (insert-shebang)
      (newline)
      (newline)
      (evil-insert-state))))

(add-hook 'find-file-hook 'my_shebang_hook)


;; Change appearance for w3m
(defun my-w3m-faces ()
  "Buffer-local face remapping for `w3m-mode-hook'."
  (setq left-margin-width 5)
  (setq right-margin-width 5)
  ; Wrap lines in w3m
  (visual-line-mode 1)
  (face-remap-add-relative 'default
                           :background "white"
                           :foreground "black"))

(add-hook 'w3m-mode-hook #'my-w3m-faces)


;; flyspell-mode
(if (executable-find "aspell")
    (progn
      (setq ispell-program-name "aspell")
      (setq ispell-extra-args '("--sug-mode=ultra")))
  (setq ispell-program-name "ispell"))

(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'org-mode-hook 'flyspell-mode)


;; flycheck
(require 'flycheck)
(add-hook 'after-init-hook #'global-flycheck-mode)
(add-to-list 'flycheck-gcc-include-path (getenv "unity_path"))
(setq-default flycheck-disabled-checkers '(c/c++-clang))
(setq-default flycheck-enabled-checkers '(c/c++-gcc))


;; company-c-headers
(require 'company-c-headers)
(add-to-list 'company-backends 'company-c-headers)
(add-to-list 'company-c-headers-path-system (getenv "unity_path"))


;; golden-ratio
(require 'golden-ratio)
(golden-ratio-mode 1)


;; pdf-tools
(add-to-list 'auto-mode-alist '("\\.pdf\\'" . doc-view-mode))
(add-hook 'doc-view-mode-hook
		  (lambda ()
				(pdf-tools-install)
				; Use HiDPI for pdf.
				(setq pdf-view-use-scaling t)
			))


;; compliation-mode
(require 'compile)
(setq compilation-ask-about-save nil          ; Just save before compiling
      compilation-always-kill t               ; Just kill old compile processes before starting the new one
      compilation-scroll-output 'first-error) ; Automatically scroll to first


;; org-mode
(require 'org)
; Need this to resolve id links
(require 'org-id)

(setq org-directory "~/Dropbox/org")
;; (setq org-id-locations-file "~/Dropbox/org/.org-id-locations")
(setq org-id-locations-file (concat org-directory "/.org-id-locations"))

;; evil-org
(require 'evil-org)
(add-hook 'org-mode-hook 'evil-org-mode)
(evil-org-set-key-theme '(navigation insert textobjects calendar))
(require 'evil-org-agenda)
(evil-org-agenda-set-keys)

(define-key org-mode-map (kbd "C-c a") 'org-agenda)
(define-key org-mode-map (kbd "C-c l") 'org-agenda-list)
(define-key org-mode-map (kbd "M-RET") 'org-insert-todo-heading)
(define-key org-mode-map (kbd "C-c C-x M-d") 'org-clock-remove-overlays)
(define-key org-mode-map (kbd "C-c M-o") 'org-mark-ring-goto)
; Use M-h,j,k,l to move around windows
(evil-define-key 'normal org-mode-map (kbd "M-h") 'windmove-left)
(evil-define-key 'normal org-mode-map (kbd "M-l") 'windmove-right)
(evil-define-key 'normal org-mode-map (kbd "M-j") 'windmove-down)
(evil-define-key 'normal org-mode-map (kbd "M-k") 'windmove-up)
; Change evil default key binding for tab (Only "TAB" works in terminal, "<tab>" not working in terminal, but works in graphic)
(evil-define-key 'normal org-mode-map (kbd "TAB") 'org-cycle)
(evil-define-key 'normal org-mode-map (kbd "g j") 'evil-next-visual-line)
(evil-define-key 'normal org-mode-map (kbd "g k") 'evil-previous-visual-line)

; Log into a logbook drawer
(setq org-log-into-drawer t)
; Add timestampt when item is done
(setq org-log-done 'time)
; Add note and timestampt when item is rescheduled
(setq org-log-reschedule 'note)
; org-refile
(setq org-refile-targets '((org-agenda-files :maxlevel . 1)))
; provide refile targets as paths as well as filename. So a level 3 headline will be available as file/level1/level2/level3. 
(setq org-refile-use-outline-path 'file)
(setq org-refile-allow-creating-parent-nodes 'confirm)
;; makes org-refile outline working with helm/ivy
(setq org-outline-path-complete-in-steps nil)
(setq org-enforce-todo-dependencies t)
(setq org-enforce-todo-checkbox-dependencies t)
(setq org-track-ordered-property-with-tag t)
(setq org-clock-into-drawer "CLOCKING")
(setq org-id-link-to-org-use-id t)
(setq org-startup-indented t)
(setq org-hide-leading-stars t)

(setq org-todo-keywords
   '((sequence "TODO(t!)" "NEXT(n!)" "SOMEDAY(s)" "WAITING(w@/!)" "|" "DONE(d@)" "CANCELED(c@)")))
(setq org-tag-alist '(("URGENT" . ?u) ("optional" . ?o)))

;; Log creation time when a TODO item is added.
(require 'org-expiry)
(org-expiry-insinuate)
; Don't have everything in the agenda view
(setq org-expiry-inactive-timestamps t)

(add-hook 'org-mode-hook (lambda ()
   (visual-line-mode)
   "Beautify Org Checkbox Symbol"
   (push '("[ ]" . "☐") prettify-symbols-alist)
   (push '("[X]" . "☑" ) prettify-symbols-alist)
   (prettify-symbols-mode)))

(setq org-capture-templates
  '(
    ("e" "Journal Entry"
         entry (file+olp+datetree (lambda () (concat org-directory "/journal.org")))
         "* %?")
    ("j" "Journal Checklist"
         checkitem (file+olp+datetree (lambda () (concat org-directory "/journal.org")))
         "[/]\n- [ ] %?")
    ("c" "Checklist Item"
	     plain (function (lambda nil (goto-char (point))))
         "*** Checklist\n- [ ] %?")
))

; Add beamer for exporting option
(add-to-list 'org-export-backends "beamer")
; Enable org-habit
(add-to-list 'org-modules 'org-habit)
; Use other source code languages in org
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (shell . t)
   (dot . t)
   ))
; Don't ask for confirmation when execute the code block
(setq org-confirm-babel-evaluate nil)

;; org-agenda-mode
; agenda files
;; (setq org-agenda-files '("~/Dropbox/org"))
(add-to-list 'org-agenda-files org-directory)

(evil-define-key 'motion org-agenda-mode-map (kbd "D") 'org-agenda-day-view)
(evil-define-key 'motion org-agenda-mode-map (kbd "W") 'org-agenda-week-view)
; Use M-h,j,k,l to move around windows
(evil-define-key 'motion org-agenda-mode-map (kbd "M-h") 'windmove-left)
(evil-define-key 'motion org-agenda-mode-map (kbd "M-l") 'windmove-right)
(evil-define-key 'motion org-agenda-mode-map (kbd "M-j") 'windmove-down)
(evil-define-key 'motion org-agenda-mode-map (kbd "M-k") 'windmove-up)


;; calfw-org calendar framework for org-mode
(require 'calfw-org)
(setq cfw:display-calendar-holidays nil)


;; org-brain
(require 'org-brain)
(with-eval-after-load 'evil
    (evil-set-initial-state 'org-brain-visualize-mode 'emacs))


;; org-ref
(setq reftex-default-bibliography '("~/Dropbox/bibliography/references.bib"))
(require 'org-ref)


;; anki-editor-mode
(require 'anki-editor)
(add-hook 'anki-editor-mode-hook
		  (lambda()
			(org-expiry-deinsinuate) 	;; Don't log creation for anki-editor-mode
			(visual-line-mode)
			(anki-editor-reset-cloze-number)
			))
(setq anki-editor-create-decks t) ;; Allow anki-editor to create a new deck if it doesn't exist
(defun anki-editor-cloze-region-auto-incr (&optional arg)
  "Cloze region without hint and increase card number."
  (interactive)
  (anki-editor-cloze-region my-anki-editor-cloze-number "")
  (setq my-anki-editor-cloze-number (1+ my-anki-editor-cloze-number))
  (forward-sexp))
(defun anki-editor-cloze-region-dont-incr (&optional arg)
  "Cloze region without hint using the previous card number."
  (interactive)
  (anki-editor-cloze-region (1- my-anki-editor-cloze-number) "")
  (forward-sexp))
(defun anki-editor-reset-cloze-number (&optional arg)
  "Reset cloze number to ARG or 1"
  (interactive)
  (setq my-anki-editor-cloze-number (or arg 1)))
(defun anki-editor-push-tree ()
    "Push all notes under a tree."
    (interactive)
    (anki-editor-push-notes '(4))
    (anki-editor-reset-cloze-number))
(defun anki-reload ()
    (interactive)
	(unload-feature 'anki-editor)
	(anki-editor-mode)
    )


;; Customize key bindings

; Use M-h,j,k,l to move around windows
(global-set-key (kbd "M-h") 'windmove-left)
(global-set-key (kbd "M-l") 'windmove-right)
(global-set-key (kbd "M-j") 'windmove-down)
(global-set-key (kbd "M-k") 'windmove-up)

;; Use tab key to complete
(global-set-key "\t" 'dabbrev-expand)
;; Use shift tab (<backtab>) to insert tab
(global-set-key (kbd "<backtab>") (lambda () (interactive) (insert "\t")))
;; ibuffer
(global-set-key (kbd "C-x C-b") 'ibuffer)

;; helm
;; Change default prefix key
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-unset-key (kbd "C-x c"))
(global-set-key (kbd "C-x b") 'helm-mini)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
;; helm show all marks
(global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-set-key (kbd "C-c h o") 'helm-occur)
(global-set-key (kbd "C-c h y") 'helm-yas-complete)

;; expand-region
(global-set-key (kbd "M-+") 'er/expand-region)
(global-set-key (kbd "M-_") 'er/contract-region)

;; Use F8 to toggle neotree globally
(global-set-key [f8] 'neotree-toggle)

;; git-gutter
(global-set-key (kbd "C-x v C-g") 'git-gutter)
(global-set-key (kbd "C-x v =") 'git-gutter:popup-hunk)
(global-set-key (kbd "C-x v p") 'git-gutter:previous-hunk)
(global-set-key (kbd "C-x v n") 'git-gutter:next-hunk)
(global-set-key (kbd "C-x v s") 'git-gutter:stage-hunk)
(global-set-key (kbd "C-x v r") 'git-gutter:revert-hunk)
(global-set-key (kbd "C-x v SPC") #'git-gutter:mark-hunk)

;; activate whitespace-mode to view all whitespace characters
(global-set-key (kbd "C-c w") 'whitespace-mode)
(global-set-key (kbd "C-c v") 'visual-line-mode)
(global-set-key (kbd "C-c l") 'linum-mode)
(global-set-key (kbd "C-c c") 'compile)

;; iedit
; Terminal cannot send C-; (or / . ,)
(global-set-key (kbd "C-c s") 'iedit-mode)

;; (global-set-key (kbd "C-c r") 'persp-keymap-prefix)

;; magit
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-c g l") 'magit-log)
(global-set-key (kbd "C-c g c") 'magit-blame)
(global-set-key (kbd "C-c g b") 'magit-branch)
(global-set-key (kbd "C-c g s") 'magit-status)
(global-set-key (kbd "C-c g t") 'magit-tag)

;; org-mode
(global-set-key (kbd "C-c o j") 'org-capture)
(global-set-key (kbd "C-c o a") 'org-agenda)
(global-set-key (kbd "C-c o l") 'org-store-link)

;; my macros
(global-set-key (kbd "C-c m j") 'my_macro_copy_all_agenda_items_link_to_journal)
(global-set-key (kbd "C-c m k") 'my_macro_close_checklist_item_and_linked_todo_item)
;; anki-editor
(global-set-key (kbd "C-c m i") 'anki-editor-insert-note)
(global-set-key (kbd "C-c m p") 'anki-editor-push-tree)
(global-set-key (kbd "C-c m P") 'anki-editor-push-notes)
(global-set-key (kbd "C-c m z z") 'anki-editor-cloze-dwim)
(global-set-key (kbd "C-c m z a") 'anki-editor-cloze-region-auto-incr)
(global-set-key (kbd "C-c m z p") 'anki-editor-cloze-region-dont-incr)
(global-set-key (kbd "C-c m z r") 'anki-editor-reset-cloze-number)

(global-set-key (kbd "C-c m f") 'toggle-frame-fullscreen)
(global-set-key (kbd "C-c m c") 'cfw:open-org-calendar)


;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(package-initialize)

;; Change backup dir
(setq backup-directory-alist `(("." . "~/.emacs.d/my_backups")))

(load-theme 'clues t)

;; Disable bars
(menu-bar-mode -1)
(tool-bar-mode -1)
(if (display-graphic-p)
	; GUI
	(toggle-scroll-bar -1))

;; Change background color for modeline to dark orange
(set-face-background 'mode-line "#af5f00")
(set-face-background 'mode-line-inactive "#af5f00")

;; Change foreground color for active modeline to black
(set-face-foreground 'mode-line "black")

;; Change color for prompt in mini-buffer
(set-face-foreground 'minibuffer-prompt "white")


;; Changing tab width
(setq-default tab-width 4)

;; Use tab key to complete
(global-set-key "\t" 'dabbrev-expand)

;; Use shift tab (<backtab>) to insert tab
(global-set-key (kbd "<backtab>") (lambda () (interactive) (insert "\t")))

;; More key bindings
(global-set-key (kbd "C-x C-b") 'ibuffer)

;; For all major mode, treat underscore as part of the whole word
(add-hook 'after-change-major-mode-hook
                       (lambda ()
                         (modify-syntax-entry ?_ "w")))


;; Enable electric-pair-mode for inserting new line and indent automatically after brace
(electric-pair-mode 1)

;; Automatically reload changed file in buffer
(global-auto-revert-mode t)

;; Key bindings for mini-buffer
(define-key minibuffer-local-map (kbd "C-u") 'backward-kill-sentence)
(define-key minibuffer-local-map (kbd "C-h") 'left-char)
(define-key minibuffer-local-map (kbd "C-l") 'right-char)
(define-key minibuffer-local-map (kbd "C-b") 'left-word)
(define-key minibuffer-local-map (kbd "C-w") 'right-word)
(define-key minibuffer-local-map "\M-p" 'evil-paste-after)

;; Key bindings for *backtrace* buffer
(add-hook 'debugger-mode-hook
  (lambda ()
    (define-key debugger-mode-map (kbd ":") 'evil-ex)
))

;; Change code indentation style for C
(add-hook 'c-mode-hook
	'(lambda()
		(c-set-style "cc-mode")))

;; Enable sh-mode for .bats file
(add-to-list 'auto-mode-alist '("\\.bats\\'" . sh-mode))

;; Automatically give executable permissions if file begins with shebang
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)


;; Package settings

;; Config evil mode
(add-to-list 'load-path "~/.emacs.d/evil")
(require 'evil)
(evil-mode 1)
; Use M-h,j,k,l to move around windows
(global-set-key (kbd "M-h") 'evil-window-left)
(global-set-key (kbd "M-l") 'evil-window-right)
(global-set-key (kbd "M-j") 'evil-window-down)
(global-set-key (kbd "M-k") 'evil-window-up)
; Use C-h,j,k,l,b,w in ex command lines
(define-key evil-ex-completion-map "\C-b" 'backward-word)
(define-key evil-ex-completion-map "\C-w" 'forward-word)
(define-key evil-ex-completion-map "\C-h" 'backward-char)
(define-key evil-ex-completion-map "\C-l" 'forward-char)
(define-key evil-ex-completion-map "\C-k" 'previous-complete-history-element)
(define-key evil-ex-completion-map "\C-j" 'next-complete-history-element)
; Use B,E to move to the beggining and end of line
(define-key evil-motion-state-map "B" 'evil-beginning-of-line)
(define-key evil-motion-state-map "E" 'evil-end-of-line)
; Use C-b to evil-scroll-up instead of evil-scroll-page-up
(define-key evil-motion-state-map "\C-b" 'evil-scroll-up)


;; settings for smartparens package
(require 'smartparens-config)
(smartparens-global-mode 1)

;; settings for evil-surround
(global-evil-surround-mode 1)

;; settings for evil-nerd-commenter
(evilnc-default-hotkeys)

;; settings for git-gutter
(global-git-gutter-mode +1)

;; settings for neotree
(require 'neotree)
;; Use F8 to toggle neotree globally
(global-set-key [f8] 'neotree-toggle)
;; Use ctrl+n to toggle neotree in evil normal state
;; (define-key evil-normal-state-map (kbd "C-n") 'neotree-toggle)
(define-key evil-normal-state-map (kbd "C-n") 'neotree-refresh)
 (add-hook 'neotree-mode-hook
    (lambda ()
      (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
      (define-key evil-normal-state-local-map (kbd "H") 'neotree-hidden-file-toggle)
      (define-key evil-normal-state-local-map (kbd "z") 'neotree-stretch-toggle)
      (define-key evil-normal-state-local-map (kbd "R") 'neotree-refresh)
      (define-key evil-normal-state-local-map (kbd "r") 'neotree-rename-node)
      (define-key evil-normal-state-local-map (kbd "c") 'neotree-create-node)
      (define-key evil-normal-state-local-map (kbd "p") 'neotree-copy-node)
      (define-key evil-normal-state-local-map (kbd "d") 'neotree-delete-node)
      (define-key evil-normal-state-local-map (kbd "s") 'neotree-enter-vertical-split)
      (define-key evil-normal-state-local-map (kbd "S") 'neotree-enter-horizontal-split)
      (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)))


;; settings for helm
(require 'helm)
(require 'helm-config)
(helm-mode 1)
;; Change default prefix key
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))
; Bind helm-M-x to M-x
(global-set-key (kbd "M-x") 'helm-M-x)
;; Global key M-y for helm-show-kill-ring
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
; Use C-h,j,k,l,b,w,n,p,z in helm mode
(define-key helm-map (kbd "C-j") 'helm-next-line)
(define-key helm-map (kbd "C-k") 'helm-previous-line)
(define-key helm-map (kbd "C-h") 'left-char)
(define-key helm-map (kbd "C-l") 'right-char)
(define-key helm-map (kbd "C-n") 'helm-next-page)
(define-key helm-map (kbd "C-p") 'helm-previous-page)
(define-key helm-map (kbd "C-w") 'right-word)
(define-key helm-map (kbd "C-b") 'left-word)
(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
(define-key helm-map (kbd "C-u") 'helm-find-files-up-one-level)
(define-key helm-map "\t" 'helm-execute-persistent-action)
(define-key helm-read-file-map (kbd "C-l") 'right-char)

(setq
      ;; helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-file-name-history-use-recentf t
      ;; helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      ;; helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      ;; helm-echo-input-in-header-line		t
)

;; helm-mini
(global-set-key (kbd "C-x b") 'helm-mini)
(setq helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match    t)

;; helm-find-files
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(define-key helm-find-files-map (kbd "C-l") 'right-char)

;; helm ack-grep (Ubuntu) or ack (MacOS)
(if (eq system-type 'darwin)
	(progn
	  (if (not (member "/usr/local/bin/" exec-path))
		(add-to-list 'exec-path "/usr/local/bin/"))
		(setq helm-grep-default-command
			"ack -Hn --color --smart-case --no-group %e %p %f"
			helm-grep-default-recurse-command
			"ack -H --color --smart-case --no-group %e %p %f")
	)
	(setq helm-grep-default-command
		"ack-grep -Hn --color --smart-case --no-group %e %p %f"
		helm-grep-default-recurse-command
		"ack-grep -H --color --smart-case --no-group %e %p %f"))

;; helm-semantic-or-imenu
(semantic-mode 1)
(setq helm-semantic-fuzzy-match	t
      helm-imenu-fuzzy-match	t)

;; helm-all-mark-rings
(global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)

;; helm-occur
(global-set-key (kbd "C-c h o") 'helm-occur)
(setq helm-apropos-fuzzy-match t)

;; helm-eshell-history
(require 'helm-eshell)
(add-hook 'eshell-mode-hook
	#'(lambda ()
		(define-key eshell-mode-map (kbd "C-c C-l")  'helm-eshell-history)
))

;; helm-mini-buffer-history
(define-key minibuffer-local-map (kbd "C-c C-l") 'helm-minibuffer-history)

;; helm-descbinds
(require 'helm-descbinds)
(helm-descbinds-mode)

;; hydra for helm
(defhydra helm-like-unite (:hint nil
                           :color pink)
;;   "
;; Nav ^^^^^^^^^        Mark ^^          Other ^^       Quit
;; ^^^^^^^^^^------------^^----------------^^----------------------
;; _K_ ^ ^ _k_ ^ ^     _m_ark           _v_iew         _i_: cancel
;; ^↕^ _h_ ^✜^ _l_     _t_oggle mark    _H_elp         _q_: quit
;; _J_ ^ ^ _j_ ^ ^     _U_nmark all     _d_elete
;; ^^^^^^^^^^                           _f_ollow: %(helm-attr 'follow)
;; "
  ;; arrows
  ("h" helm-beginning-of-buffer)
  ("j" helm-next-line)
  ("k" helm-previous-line)
  ("l" helm-end-of-buffer)
  ("p" helm-previous-page)
  ("n" helm-next-page)
  ;; beginning/end
  ("g" helm-beginning-of-buffer)
  ("G" helm-end-of-buffer)
  ;; scroll
  ("K" helm-scroll-other-window-down)
  ("J" helm-scroll-other-window)
  ;; mark
  ("m" helm-toggle-visible-mark)
  ("t" helm-toggle-all-marks)
  ("U" helm-unmark-all)
  ;; exit
  ("<escape>" keyboard-escape-quit "" :exit t)
  ("q" keyboard-escape-quit :exit t)
  ("i" nil)
  ;; sources
  ("}" helm-next-source)
  ("{" helm-previous-source)
  ;; rest
  ("H" helm-help)
  ("v" helm-execute-persistent-action)
  ("d" helm-buffer-run-kill-persistent)
  ("f" helm-follow-mode))

(define-key helm-map (kbd "<escape>") 'helm-like-unite/body)

;; projectile and helm-projectile
(projectile-global-mode)
(setq projectile-completion-system 'helm)
(helm-projectile-on)
(setq projectile-switch-project-action 'helm-projectile)
;; keymap prefix for projectile (C-c p)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
(define-key projectile-mode-map (kbd "C-c p s a") 'helm-projectile-ack)


;; iedit
(require 'iedit)
; Terminal cannot send C-; (or / . ,)
(global-set-key (kbd "C-c s") 'iedit-mode)
;; evil-iedit-state
(require 'evil-iedit-state)
(define-key iedit-mode-keymap (kbd "M-e") 'evil-iedit-state)


;; ggtags and helm-gtags
(add-hook 'c-mode-common-hook
    (lambda ()
      (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
		(ggtags-mode 1)
		(helm-gtags-mode)
		)
      (define-key evil-normal-state-local-map (kbd "M-.") 'ggtags-find-tag-dwim)
	  ))
(custom-set-variables
 '(helm-gtags-prefix-key "\C-c t")
 '(helm-gtags-suggested-key-mapping t))


;; bookmark+
(add-to-list 'load-path "~/.emacs.d/custom/bookmark-plus/")
(require 'bookmark+)
;; bm
(require 'bm)


;; settings for magit
(global-set-key (kbd "C-x g") 'magit-status)
(add-hook 'magit-post-refresh-hook
          #'git-gutter:update-all-windows)

;; settings for evil-magit
(require 'evil-magit)

(evil-define-key evil-magit-state magit-mode-map "o" 'magit-file-checkout)


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(bmkp-last-as-first-bookmark-file "/Users/broliang/.emacs.d/bookmarks")
 '(git-gutter:modified-sign "~")
 '(insert-shebang-file-types
   (quote
	(("py" . "python3")
	 ("groovy" . "groovy")
	 ("fish" . "fish")
	 ("robot" . "robot")
	 ("rb" . "ruby")
	 ("lua" . "lua")
	 ("php" . "php")
	 ("sh" . "bash")
	 ("pl" . "perl")
	 ("bats" . "bats"))))
 '(linum-format " %3d ")
 '(neo-confirm-create-directory (quote off-p))
 '(neo-confirm-create-file (quote off-p)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(git-gutter:added ((t (:foreground "white" :weight extra-light))))
 '(git-gutter:deleted ((t (:foreground "white" :weight extra-light))))
 '(git-gutter:modified ((t (:foreground "white" :weight extra-light))))
 '(linum ((t (:background "black" :foreground "#6a6a6a" :width condensed))))
 '(sh-heredoc ((t (:foreground "color-136" :weight normal)))))

;; For file extension in my_insert_file_type_list and file has not been created yet, insert shebang, two newline and enter evil-insert-state
(defun my_shebang_hook()
  (setq my_insert_file_type_list (list
    "sh"
    "py"
    "bats"
   ))
  (if (and (member (file-name-extension (buffer-name)) my_insert_file_type_list) (not (file-exists-p (buffer-name))))
    (progn
      (insert-shebang)
      (newline)
      (newline)
      (evil-insert-state))))

(add-hook 'find-file-hook 'my_shebang_hook)


;; Change appearance for w3m
(defun my-w3m-faces ()
  "Buffer-local face remapping for `w3m-mode-hook'."
  (setq left-margin-width 5)
  (setq right-margin-width 5)
  ; Wrap lines in w3m
  (visual-line-mode 1)
  (face-remap-add-relative 'default
                           :background "white"
                           :foreground "black"))

(add-hook 'w3m-mode-hook #'my-w3m-faces)


